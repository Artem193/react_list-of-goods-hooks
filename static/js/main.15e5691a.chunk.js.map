{"version":3,"sources":["App.tsx","index.tsx"],"names":["Classes","goodsFromServer","App","useState","visibleGoods","setVisibleGoods","sortField","setSortField","searchReverse","allClass","includes","rev","searchClassButton","buttonName","classButtonActive","className","type","alphabet","onClick","prevGoods","sort","a","b","localeCompare","alphabetRev","length","lengthRev","reverse","prevSortField","split","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBYA,E,0DAbCC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGUD,K,cAAAA,E,oBAAAA,E,+BAAAA,E,gBAAAA,E,4BAAAA,M,KAQL,IAAME,EAAgB,WAC3B,MAAwCC,mBAASF,GAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEMC,EAAgB,SAACC,GACrB,QAAIA,EAASC,SAASV,EAAQW,MAO1BC,EAAoB,SAACC,EAAoBC,GAC7C,OAAIR,EAAUI,SAASG,GACdC,EAGH,GAAN,OAAUA,EAAV,cAqCF,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWH,EAAkBZ,EAAQiB,SAAU,kBAC/CC,QAxCa,WACnBb,GAAgB,SAAAc,GAAS,OACvBX,EAAcF,GACV,YAAIa,GAAWC,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEC,cAAcF,MAC9C,YAAIF,GAAWC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,SAEpDf,EAAaC,EAAcF,GACvBN,EAAQwB,YACRxB,EAAQiB,WA6BR,iCAQA,wBACED,KAAK,SACLD,UAAWH,EAAkBZ,EAAQyB,OAAQ,qBAC7CP,QArCW,WACjBb,GAAgB,SAAAc,GAAS,OACvBX,EAAcF,GACV,YAAIa,GAAWC,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEG,OAASJ,EAAEI,UAC3C,YAAIN,GAAWC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEI,OAASH,EAAEG,aAEjDlB,EAAaC,EAAcF,GAAaN,EAAQ0B,UAAY1B,EAAQyB,SA4BhE,4BAQA,wBACET,KAAK,SACLD,UAAWH,EAAkBZ,EAAQW,IAAK,qBAC1CO,QApCQ,WACdb,GAAgB,SAAAc,GAAS,OAAK,YAAIA,GAAWQ,aAC7CpB,GAAa,SAAAqB,GAAa,OACxBpB,EAAcoB,GACVA,EAAcC,MAAM,KAAK,GAD7B,UAEOD,EAFP,YAEwB5B,EAAQW,SA4B9B,qBAQCL,EAAUmB,OAAS,GAClB,wBACET,KAAK,SACLD,UAAU,4BACVG,QApCI,WACZb,EAAgBJ,GAChBM,EAAa,KA+BP,sBAUJ,6BACGH,EAAa0B,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YCrHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.15e5691a.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\n\nimport { useState } from 'react';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nexport enum Classes {\n  rev = 'reverse',\n  alphabet = 'alphabet',\n  alphabetRev = 'alphabet reverse',\n  length = 'length',\n  lengthRev = 'length reverse',\n}\n\nexport const App: React.FC = () => {\n  const [visibleGoods, setVisibleGoods] = useState(goodsFromServer);\n  const [sortField, setSortField] = useState('');\n\n  const searchReverse = (allClass: string) => {\n    if (allClass.includes(Classes.rev)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const searchClassButton = (buttonName: string, classButtonActive: string) => {\n    if (sortField.includes(buttonName)) {\n      return classButtonActive;\n    }\n\n    return `${classButtonActive} is-light`;\n  };\n\n  const sortAlphabet = () => {\n    setVisibleGoods(prevGoods => (\n      searchReverse(sortField)\n        ? [...prevGoods].sort((a, b) => b.localeCompare(a))\n        : [...prevGoods].sort((a, b) => a.localeCompare(b))\n    ));\n    setSortField(searchReverse(sortField)\n      ? Classes.alphabetRev\n      : Classes.alphabet);\n  };\n\n  const sortLength = () => {\n    setVisibleGoods(prevGoods => (\n      searchReverse(sortField)\n        ? [...prevGoods].sort((a, b) => b.length - a.length)\n        : [...prevGoods].sort((a, b) => a.length - b.length)\n    ));\n    setSortField(searchReverse(sortField) ? Classes.lengthRev : Classes.length);\n  };\n\n  const reverse = () => {\n    setVisibleGoods(prevGoods => ([...prevGoods].reverse()));\n    setSortField(prevSortField => (\n      searchReverse(prevSortField)\n        ? prevSortField.split(' ')[0]\n        : `${prevSortField} ${Classes.rev}`\n    ));\n  };\n\n  const reset = () => {\n    setVisibleGoods(goodsFromServer);\n    setSortField('');\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={searchClassButton(Classes.alphabet, 'button is-info')}\n          onClick={sortAlphabet}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={searchClassButton(Classes.length, 'button is-success')}\n          onClick={sortLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={searchClassButton(Classes.rev, 'button is-warning')}\n          onClick={reverse}\n        >\n          Reverse\n        </button>\n\n        {sortField.length > 0 && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}